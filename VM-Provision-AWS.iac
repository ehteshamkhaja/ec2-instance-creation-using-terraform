import groovy.json.*

node ("$ENV") {

     deleteDir ()
     def mainDir = "cloud"
     def statefile= "terraform.tfstate"
    cleanWs ()
    def ENVNAME;
    if (ENVNAME != "PR" && ENVNAME != "DR" && ENVNAME != "STG") {
        ENVNAME = 'UAT'
    } else if ( ENVNAME == "DR" && ENVNAME == "STG") {
       ENVNAME = "$ENVNAME"
    } else {
        ENVNAME = "PR"
    }

   try {
       stage ('Fetch GIT code')
       dir (mainDir){
         git poll: true, branch: "$branch", url: "https://github.com/ehteshamkhaja/ec2-instance-creation-using-terraform.git"
       }// dir
   }// stage 
    
     stage("Terraform Initialization and Plan"){
        withAWS(credentials: 'AWS-Credentials') {
        try {
         sh """
             cd ./cloud/ec2-infra-aws
             echo 'Running Terraform init'
             terraform init
             echo 'Next, Terraform Plan would be executed' 
             
             set +x && terraform plan 
        """
       
         input message: 'Are you sure you want to apply these changes?', ok: 'Yes'
         
         sh 'echo "Terraform plan is reviewed and approved now !!!"' 
        }
        } catch (exc) {
            print "Terraform init/plan failed"
            error('Aborting the pipeline' + exc)
        } //catch
         
    } //stage

    stage("Terraform Apply"){
     withAWS(credentials: 'AWS-Credentials') {
       try {
        sh """
        cd ./cloud/ec2-infra-aws
        set +x && terraform apply $Approval 
           
        """
       }
    }
        catch (exc) {
            print "Terraform apply failed"
            error('Aborting the pipeline' + exc)
        }//catch 
    
     }//stage

     stage("Push the State file to GIT"){
       commitCode("$branch", "./$mainDir", "ec2-infra-aws/$statefile", "Latest state file committed")
     } //stage
}//node

def commitCode(targetBranch, localBranchPath, fileName, commitMsg) {
    sh """
        cd $localBranchPath
        git add $fileName
        git diff --staged --quiet || git commit -m  '$commitMsg'
        echo $(targetBranch)
        git push -u origin ${targetBranch}
    """
}